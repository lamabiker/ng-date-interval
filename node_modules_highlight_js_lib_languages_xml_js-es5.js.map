{"version":3,"mappings":"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","names":["args","className","begin","contains","illegal","end","endsWithParent","relevance","endsParent","variants","name","aliases","case_insensitive","XML_META_KEYWORDS","QUOTE_META_STRING_MODE","APOS_META_STRING_MODE","XML_META_PAR_KEYWORDS","hljs","XML_ENTITIES","keywords","starts","returnEnd","subLanguage","lookahead","TAG_NAME_RE","either","module"],"sources":["webpack:///node_modules/highlight.js/lib/languages/xml.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: HTML, XML\nWebsite: https://www.w3.org/XML/\nCategory: common\nAudit: 2020\n*/\n\n/** @type LanguageFn */\nfunction xml(hljs) {\n  // Element names can contain letters, digits, hyphens, underscores, and periods\n  const TAG_NAME_RE = concat(/[A-Z_]/, optional(/[A-Z0-9_.-]*:/), /[A-Z0-9_.-]*/);\n  const XML_IDENT_RE = /[A-Za-z0-9._:-]+/;\n  const XML_ENTITIES = {\n    className: 'symbol',\n    begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/\n  };\n  const XML_META_KEYWORDS = {\n    begin: /\\s/,\n    contains: [\n      {\n        className: 'meta-keyword',\n        begin: /#?[a-z_][a-z1-9_-]+/,\n        illegal: /\\n/\n      }\n    ]\n  };\n  const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {\n    begin: /\\(/,\n    end: /\\)/\n  });\n  const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, {\n    className: 'meta-string'\n  });\n  const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    className: 'meta-string'\n  });\n  const TAG_INTERNALS = {\n    endsWithParent: true,\n    illegal: /</,\n    relevance: 0,\n    contains: [\n      {\n        className: 'attr',\n        begin: XML_IDENT_RE,\n        relevance: 0\n      },\n      {\n        begin: /=\\s*/,\n        relevance: 0,\n        contains: [\n          {\n            className: 'string',\n            endsParent: true,\n            variants: [\n              {\n                begin: /\"/,\n                end: /\"/,\n                contains: [ XML_ENTITIES ]\n              },\n              {\n                begin: /'/,\n                end: /'/,\n                contains: [ XML_ENTITIES ]\n              },\n              {\n                begin: /[^\\s\"'=<>`]+/\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  };\n  return {\n    name: 'HTML, XML',\n    aliases: [\n      'html',\n      'xhtml',\n      'rss',\n      'atom',\n      'xjb',\n      'xsd',\n      'xsl',\n      'plist',\n      'wsf',\n      'svg'\n    ],\n    case_insensitive: true,\n    contains: [\n      {\n        className: 'meta',\n        begin: /<![a-z]/,\n        end: />/,\n        relevance: 10,\n        contains: [\n          XML_META_KEYWORDS,\n          QUOTE_META_STRING_MODE,\n          APOS_META_STRING_MODE,\n          XML_META_PAR_KEYWORDS,\n          {\n            begin: /\\[/,\n            end: /\\]/,\n            contains: [\n              {\n                className: 'meta',\n                begin: /<![a-z]/,\n                end: />/,\n                contains: [\n                  XML_META_KEYWORDS,\n                  XML_META_PAR_KEYWORDS,\n                  QUOTE_META_STRING_MODE,\n                  APOS_META_STRING_MODE\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      hljs.COMMENT(\n        /<!--/,\n        /-->/,\n        {\n          relevance: 10\n        }\n      ),\n      {\n        begin: /<!\\[CDATA\\[/,\n        end: /\\]\\]>/,\n        relevance: 10\n      },\n      XML_ENTITIES,\n      {\n        className: 'meta',\n        begin: /<\\?xml/,\n        end: /\\?>/,\n        relevance: 10\n      },\n      {\n        className: 'tag',\n        /*\n        The lookahead pattern (?=...) ensures that 'begin' only matches\n        '<style' as a single word, followed by a whitespace or an\n        ending braket. The '$' is needed for the lexeme to be recognized\n        by hljs.subMode() that tests lexemes outside the stream.\n        */\n        begin: /<style(?=\\s|>)/,\n        end: />/,\n        keywords: {\n          name: 'style'\n        },\n        contains: [ TAG_INTERNALS ],\n        starts: {\n          end: /<\\/style>/,\n          returnEnd: true,\n          subLanguage: [\n            'css',\n            'xml'\n          ]\n        }\n      },\n      {\n        className: 'tag',\n        // See the comment in the <style tag about the lookahead pattern\n        begin: /<script(?=\\s|>)/,\n        end: />/,\n        keywords: {\n          name: 'script'\n        },\n        contains: [ TAG_INTERNALS ],\n        starts: {\n          end: /<\\/script>/,\n          returnEnd: true,\n          subLanguage: [\n            'javascript',\n            'handlebars',\n            'xml'\n          ]\n        }\n      },\n      // we need this for now for jSX\n      {\n        className: 'tag',\n        begin: /<>|<\\/>/\n      },\n      // open tag\n      {\n        className: 'tag',\n        begin: concat(\n          /</,\n          lookahead(concat(\n            TAG_NAME_RE,\n            // <tag/>\n            // <tag>\n            // <tag ...\n            either(/\\/>/, />/, /\\s/)\n          ))\n        ),\n        end: /\\/?>/,\n        contains: [\n          {\n            className: 'name',\n            begin: TAG_NAME_RE,\n            relevance: 0,\n            starts: TAG_INTERNALS\n          }\n        ]\n      },\n      // close tag\n      {\n        className: 'tag',\n        begin: concat(\n          /<\\//,\n          lookahead(concat(\n            TAG_NAME_RE, />/\n          ))\n        ),\n        contains: [\n          {\n            className: 'name',\n            begin: TAG_NAME_RE,\n            relevance: 0\n          },\n          {\n            begin: />/,\n            relevance: 0,\n            endsParent: true\n          }\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = xml;\n"]}